1. Warum ist Sprungvorhersage sinnvoll?
Damit kann der Programmablauf effizienter gestaltet werden. Im Fall einer korrekten Vorhersage können Anwendungen mit minimaler Verzögerung für Vergleiche weiterarbeiten.

2. Was ist der Unterschied zwischen lokalen und globalen Prädiktoren? Welche Gründe könnten für die eine oder andere Variante sprechen?
Lokale Prädikatoren haben einen History Buffer nur für die aktuelle Abfrage, globale Prädikatoren für alle Abfragen im Programm.
Globale Prädikatoren haben also den Vorteil, dass Abhängigkeiten zwischen Sprunganweisungen berücksichtigt werden. Das ist gut für z.B. verschachtelte Schleifen. Globale Prädikatoren sind also für Programme geeignet, bei denen viele Sprunganweisungen von einander abhängen.

3. Was ist ein Vor- / Nachteil von 2-bit-Zustandsautomaten ggü. 1-bit-Zustandsautomaten?

4. Was ist der Vorteil vom Hysteresis Scheme ggü. dem Saturation Counter Scheme?
Wenn der Prädikator auf weakly taken steht und wir abwechselnd not taken und taken haben, dann machen wir bei Hysteresis Scheme immer falsche Vorhersagen, bei Saturation Counter Scheme dagegen ist nur jede 2. Vorhersage falsch.

5. Was ist der Branch Target Buffer (BTB)und was tut er?
Der BTB ist ein Speicher, der die Adresse eines bedingten Sprungs, die Zieladresse sowie das geprüfte Flag beinhaltet. Er hilft, zu entscheiden, ob ein Sprung genommen oder nicht genommen wird.

6. Warum ist Not Taken bzw. Strongly Not Taken der einzig sinnvolle Startzustand für die Automaten (auch im Zusammenhang mit dem BTB)?
Wenn der Startzustand taken oder weakly taken wäre, dann würde bereits vor Auswerten der ersten Bedingungsanweisung ein Sprung zur Zieladresse gesprungen. Die Zieladresse wird aus dem BTB geholt, dieser ist aber noch nicht befüllt. Der Sprung wäre also nicht ausführbar.


Globale Sprungvorhersage:

  mov rax, 0
.loop1:
  mov rbx, 1
.loop2:
  ; Work
  inc rbx
  cmp rbx, 10
  jl .loop2
  inc rax
  cmp rax, 3
  jl .loop1

; Initial:   PWNT
; rbx = 1, rax = 0
; rbx = 2, rax = 0
; 1. Aufruf "rbx < 10": True (Falsch geraten) => PST
; rbx = 3, rax = 0
; 2. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 4, rax = 0
; 3. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 5, rax = 0
; 4. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 6, rax = 0
; 5. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 7, rax = 0
; 6. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 8, rax = 0
; 7. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 9, rax = 0
; 8. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 10, rax = 0
; 9. Aufruf "rbx < 10": False (Falsch geraten) => PWT
; rbx = 10, rax = 1
; 1. Aufruf "rax < 3": True (Richtig geraten) => PST

; rbx = 2, rax = 1
; 10. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 3, rax = 1
; 11. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 4, rax = 1
; 12. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 5, rax = 1
; 13. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 6, rax = 1
; 14. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 7, rax = 1
; 15. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 8, rax = 1
; 16. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 9, rax = 1
; 17. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 10, rax = 1
; 18. Aufruf "rbx < 10": False (Falsch geraten) => PWT
; rbx = 10, rax = 2
; 2. Aufruf "rax < 3": True (Richtig geraten) => PST

; rbx = 1, rax = 2
; 19. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 2, rax = 2
; 20. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 3, rax = 2
; 21. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 4, rax = 2
; 22. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 5, rax = 2
; 23. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 6, rax = 2
; 24. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 7, rax = 2
; 25. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 8, rax = 2
; 26. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 9, rax = 2
; 27. Aufruf "rbx < 10": True (Richtig geraten) => PST
; rbx = 10, rax = 2
; 28. Aufruf "rbx < 10": False (Falsch geraten) => PWT
; rbx = 10, rax = 3
; 3. Aufruf "rax < 3": False (Falsch geraten) => PSNT

Es gab insgesamt 31 Sprungvorhersagen. Davon waren 4 falsch und 27 Richtig.























